# ==================================================
# INSTRUc√ïES DE COMPILAc√ÉO - KANBAN SYSTEM LITE
# ==================================================

# AMBIENTE: MSYS2 MinGW 64-bit
# COMPILADOR: GCC 15.2.0
# CMAKE: 4.1.1

# =======================
# 1. CONFIGURAc√ÉO INICIAL
# =======================

# Navegar para o diret√≥rio do projeto
cd /c/Users/jp/Desktop/KanbanSystem-lite/design

# Limpar build anterior (se existir)
rm -rf build

# Criar diret√≥rio de build
mkdir build
cd build

# =======================
# 2. CONFIGURAR CMAKE
# =======================

# Configurar o projeto com CMake
cmake .. -G "MSYS Makefiles"

# SA√çDA ESPERADA:
# -- The CXX compiler identification is GNU 15.2.0
# -- Detecting CXX compiler ABI info
# -- Detecting CXX compiler ABI info - done
# -- Check for working CXX compiler: C:/msys64/mingw64/bin/c++.exe - skipped
# -- Detecting CXX compile features
# -- Detecting CXX compile features - done
# -- Build type: Debug
# -- C++ compiler: C:/msys64/mingw64/bin/c++.exe
# -- C++ standard: 17
# -- ‚úÖ Configurac√£o CMake conclu√≠da!
# -- üëâ Para compilar: cmake --build .
# -- üëâ Para executar: ./compile_test

# =======================
# 3. COMPILAR PROJETO
# =======================

# Opc√£o 1: Usar CMake para compilar
cmake --build .

# SA√çDA ESPERADA:
# [ 50%] Building CXX object CMakeFiles/compile_test.dir/tests/compile_test.cpp.obj
# [100%] Linking CXX executable compile_test.exe
# [100%] Built target compile_test

# Opc√£o 2: Usar make diretamente
make

# =======================
# 4. EXECUTAR TESTE
# =======================

# Executar teste de compilac√£o
./compile_test
./kanban_cli

# SA√çDA ESPERADA:
# Headers included successfully
# digite qualquer numero:
# [aguardando input]

# =======================
# 5. COMPILAc√ÉO ALTERNATIVA (EMERG√äNCIA)
# =======================

# Se o CMake falhar, compilar diretamente com g++:
cd /c/Users/jp/Desktop/KanbanSystem-lite/design
g++ -std=c++17 -I include tests/compile_test.cpp -o compile_test
./compile_test

# =======================
# 6. COMANDOS DE VERIFICAc√ÉO
# =======================

# Verificar vers√µes das ferramentas:
cmake --version
g++ --version
make --version

# Verificar se execut√°vel foi criado:
ls -la compile_test*

# =======================
# 7. LIMPEZA
# =======================

# Limpar build completo:
rm -rf build

# Limpar apenas execut√°veis:
rm -f compile_test compile_test.exe

# ==================================================
# ESTRUTURA DO PROJETO VERIFICADA:
# ==================================================

# ‚úÖ design/include/domain/Board.h
# ‚úÖ design/include/domain/Column.h  
# ‚úÖ design/include/domain/Card.h
# ‚úÖ design/include/domain/User.h
# ‚úÖ design/include/domain/Tag.h
# ‚úÖ design/include/domain/Activity.h
# ‚úÖ design/include/domain/ActivityLog.h
# ‚úÖ design/include/interfaces/IRepository.h
# ‚úÖ design/include/interfaces/IService.h
# ‚úÖ design/include/interfaces/IFilter.h
# ‚úÖ design/include/interfaces/IView.h
# ‚úÖ design/include/persistence/FileRepository.h
# ‚úÖ design/tests/compile_test.cpp
# ‚úÖ design/CMakeLists.txt

# ==================================================
# PR√ìXIMOS PASSOS PARA ETAPA 2 (CLI):
# ==================================================

# 1. Implementar arquivos .cpp para as classes do dom√≠nio
# 2. Desenvolver KanbanService (implementac√£o de IService)
# 3. Criar CLI baseado em IView
# 4. Implementar FileRepository
# 5. Adicionar operac√µes CRUD completas

# ==================================================
# AUTORES: jp
# DATA: $(date)
# ==================================================


Eu preciso que voce faca a etapa 2 do projeto 

relembrando 

Etapa 2 ‚Äî Primeiro teste em terminal (CLI)
‚óè Entrega: ate 02/10/2025 23h59
‚óè 4 pontos
‚óè O que entregar
  ‚óã Implementac√£o m√≠nima funcional em modo texto (sem GUI obrigat√≥ria), com:
    ‚ñ† Build funcional (cmake --build .).
    ‚ñ† Execut√°vel CLI que demonstra operac√µes-chave (ex.: para MP3
    Player: listar arquivos, criar playlist, simular play; para SVG editor:
    criar pol√≠gonos via coordenadas, salvar arquivo; para Agenda: criar
    evento, listar eventos; para Kanban: criar quadro/lista/cart√£o).
        ‚ñ† README com instruc√µes para rodar os testes CLI.
‚óè Objetivo
  ‚óã Mostrar que o dom√≠nio e a l√≥gica est√£o implementados e que as classes
  funcionam independentemente da GUI.
‚óè Criterios de aceitac√£o m√≠nimos
  ‚óã CLI executa em uma opc√£o o teste das principais funcionalidades com sa√≠da
  prevista; c√≥digo usa smart pointers e STL adequadamente; excec√µes
  tratadas.
